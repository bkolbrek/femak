C      SUBROUTINE EXVALP(KLD,VDIMP,KLOCE,VCORE,VPRNE,VPREE,KNE,VFE,VKE,
C     1  VKE1,VKGS,VKGD,VFG,VCORG,KDLNC,KNEQ,VRES,VDLE,VDLG,VMGS,VMGD,
C     2  VEC,VLAMB,VLAM1,VKSS,VMSS,V1,VX,NEQ,NSS)

c.......call without NEQ and NSS

      SUBROUTINE EXVALP(KLD,VDIMP,KLOCE,VCORE,VPRNE,VPREE,KNE,VFE,VKE,
     1  VKE1,VKGS,VKGD,VFG,VCORG,KDLNC,KNEQ,VRES,VDLE,VDLG,VMGS,VMGD,
     2  VEC,VLAMB,VLAM1,VKSS,VMSS,V1,VX,VNDSRC,KTYPRSG,VPRSG)
C*********************************************************************
C     EXVALP.FOR
C*********************************************************************
C     3/1 1995
C     Ulf R. Kristiansen & Tonni F. Johansen,   NTH
C     Based on Dhatt & Touzot p.436 
C     modified somewhat because different use of COMMON-blocks and
C     call to element rutines.
c     
C*********************************************************************
C     TO EXECUTE BLOCK ' VALP '
C     TO COMPUTE EIGENVALUES AND EIGENVECTORS BY SUBSPACE
C     ITERATION        EXVA   7
C     (IF  NVALP.EQ.1  INVERSE ITERATION METHOD)
C=====================================================================
      IMPLICIT REAL*8(A-H,O-Z)
      include 'femak.cmn'
c $DECLARE
      REAL*8 VCORE(1),VPRNE(1),VPREE(1),VDLE(1),VKE(1),VKE1(1),VFE(1)
      COMPLEX*16 VIE(1),VIE1(1),VNDSRC(1),VPRSG(1)
      INTEGER KTYPRSG(1)

      INTEGER KLD(1),KLOCE(1),KNE(1),KDLNC(1),KNEQ(1)
      REAL*8 VDIMP(1),VKGS(1),VKGD(1),VKGI(1),VFG(1),VRES(1),VCORG(1)
      REAL*8 VDLG(1),VMGS(1),VMGD(1)
      REAL*8 VEC(NEQ,1),VLAMB(1),VLAM1(1),VKSS(1),VMSS(1),V1(1)
      REAL*8 VX(NSS,1)


      REAL*8 ZERO,UN,GRAND,ENERG,CMAX,C,C1
      INTEGER I,ICONT,ID,JS,II,ITERM,ITMAX,II0,IS,IEX,IS1,I1
      DATA ZERO/0.D0/,UN/1.0D0/,GRAND/1.0D32/

      ABS(X)=DABS(X)
C---------------------------------------------------------------------
C
C------  PRELIMINARY COMPUTATIONS
C
C------  ASSEMBLE KG AND MG
      CALL ASKG(KLD,VDIMP,KLOCE,VCORE,VPRNE,VPREE,KNE,VKE,VKE1,
     1   VIE,VIE1,VFE,VKGS,VKGD,VKGI,VFG,VDLE,VRES,
     2   VNDSRC,KTYPRSG,VPRSG)
      CALL ASMG(KLD,VDIMP,KLOCE,VCORE,VPRNE,VPREE,KNE,VKE,VKE1,
     1   VIE,VIE1,VFE,VMGS,VMGD,VMGS,VFG,VDLE,VRES,
     2   VNDSRC,KTYPRSG,VPRSG)

C--------Shifting eigenvalues
      IF (SHIFT.NE.0.0) THEN
	DO 600 I=1,KLD(NEQ+1)-1
	  VKGS(I)=VKGS(I)-SHIFT*VMGS(I)
600	CONTINUE
	DO 602 I=1,NEQ
	  VKGD(I)=VKGD(I)-SHIFT*VMGD(I)
602	CONTINUE
      ENDIF

C------  TRIANGULARIZE KG
      CALL SOL(VKGS,VKGD,VKGI,VFG,KLD,NEQ,MP,1,0,0,ENERG)
C------  LOAD VECTOR EQUAL TO DIAGONAL OF M
      CMAX=ZERO
      ICONT=0
      DO 10 ID=1,NEQ
      C=GRAND
C------  CHECK FOR ZERO DIAGONAL TERM IN VMGD
      IF(VMGD(ID).EQ.ZERO) GO TO 5
      ICONT=ICONT+1
      C=VKGD(ID)/VMGD(ID)
5     V1(ID)=C
      IF(C.GT.CMAX) CMAX=C
      VEC(ID,1)=VMGD(ID)
      DO 10 JS=2,NSS
10    VEC(ID,JS)=ZERO  
C------ CHECK IF SUBSPACE DIMENSION IS EQUAL TO MASS D.O.F.
      IF(ICONT.LT.NSS) GO TO 250
C------  UNIT LOAD VECTORS CORRESPONDING TO MIN. OF
C        K(I,I)/M(I,I)
      DO 30 JS=2,NSS
      C=CMAX
      DO 20 ID=1,NEQ
      IF(V1(ID).GT.C) GO TO 20
      C=V1(ID)
      II=ID
20    CONTINUE
      V1(II)=CMAX
      VEC(II,JS)=UN
30    VLAMB(JS)=UN
      VLAMB(1)=UN
      IF(NVALP.EQ.1) NSS=1
C------  INVERSE ITERATION IF NVALP=1
C------  START ITERATION LOOP
C
      ITERM=0
      ITMAX=NITER+1
      DO 200 ITER=1,ITMAX
C------ COMPUTE RITZ VECTORS
      II0=0
      DO 80 JS=1,NSS
      II0=II0+JS
      DO 40 ID=1,NEQ
40    V1(ID)=VEC(ID,JS)
      CALL SOL(VKGS,VKGD,VKGI,V1,KLD,NEQ,MP,0,1,0,ENERG)
C------  CALCULATE THE PROJECTION OF K
      II=II0
      DO 60 IS=JS,NSS
      C=ZERO
      DO 50 ID=1,NEQ
50    C=C+V1(ID)*VEC(ID,IS)
      VKSS(II)=C
60    II=II+IS
      DO 70 ID=1,NEQ
70    VEC(ID,JS)=V1(ID)
80    CONTINUE
C------  CALCULATE THE PROJECTION OF M
      II0=0
      DO 120 JS=1,NSS
      II0=II0+JS
      DO 85 ID=1,NEQ
85    V1(ID)=ZERO
      CALL MULKU(VMGS,VMGD,VMGS,KLD,VEC(1,JS),NEQ,0,V1)
      II=II0
      DO 100 IS=JS,NSS
      C=ZERO
      DO 90 ID=1,NEQ
90    C=C+V1(ID)*VEC(ID,IS)
      IF(ITERM.GT.0) GO TO 120
      VMSS(II)=C
100   II=II+IS
      DO 110 ID=1,NEQ
110   VEC(ID,JS)=V1(ID)
120   CONTINUE
      IF(NSS.GT.1) GO TO 125
      VLAM1(1)=VKSS(1)/VMSS(1)
      GO TO 165
C------  CALCULATE EIGENVALUES IN THE SUBSPACE
125   CALL JACOBI(VKSS,VMSS,NSS,NSWM,TOLJAC,V1,VLAM1,VX)
C------  NEW LOAD VECTOR          EXVA 108
      DO 160 ID=1,NEQ
      DO 130 JS=1,NSS
130   V1(JS)=VEC(ID,JS)
      DO 150 JS=1,NSS
      C=ZERO
      DO 140 IS=1,NSS
140   C=C+V1(IS)*VX(IS,JS)
150   VEC(ID,JS)=C
160   CONTINUE
165   CONTINUE
C------  PRINT THE ITERATION VALUES
      IF(M.LT.1) GO TO 180
      WRITE(MP,2000) ITER
2000  FORMAT(//' . . . . . . ITERATION ',I5/)
      DO 170 IS=1,NSS
      WRITE(MP,2010) IS,VLAM1(IS)
2010  FORMAT(/' EIGENVALUE NO. ',I5,' =',E12.5//'EIGENVECTOR:')
170   CALL PRSOL(KDLNC,VCORG,VDIMP,KNEQ,VEC(1,IS))
C------  CHECK FOR CONVERGENCE
180   IF(ITERM.GT.0) GO TO 210
      C=ZERO
      IEX=0
      DO 190 IS=1,NSS
      C1=ABS((VLAM1(IS)-VLAMB(IS))/VLAMB(IS))
      IF(C1.GT.C) C=C1
      IF(C1.LE.EPSLB) IEX=IEX+1
190   CONTINUE
      WRITE(MP,2015) ITER,C,IEX
2015  FORMAT(' ITERATION ',I4,' MAX. ERROR=',E9.1,' EXAXT EIGENVALUES:'
     1,I4)
      IF(IEX.GE.NVALP) ITERM=1
C------ NON CONVERGNCE  
      IF(ITER.LT.NITER.OR.ITERM.EQ.1) GO TO 195
      WRITE(MP,2020) NITER
2020  FORMAT(' ** NON CONVERGENCE AFTER ',I5,' ITERATIONS')
      ITERM=1
C------  SAVE THE EIGENVALUES
195   DO 200 IS=1,NSS
200   VLAMB(IS)=VLAM1(IS)
C
C------ RESULT
C
C------ ARRANGE EIGENVALUES IN ASCENDING ORDER
210   IS1=NSS-1
      IF(IS1.EQ.0) GO TO 235
      DO 230 IS=1,IS1
      I1=IS+1
      C=VLAMB(IS)
      II=IS
      DO 220 JS=I1,NSS
      IF(C.LT.VLAMB(JS)) GO TO 220
      C=VLAMB(JS)
      II=JS
220   CONTINUE
      VLAMB(II)=VLAMB(IS)
      VLAMB(IS)=C
      DO 230 ID=1,NEQ
      C=VEC(ID,IS)
      VEC(ID,IS)=VEC(ID,II)
230   VEC(ID,II)=C
C------ PRINT RESULT
      WRITE(MP,2030) ITER
2030  FORMAT(/' . . . . . . CONVERGENCE IN',I4,' ITERATIONS'/)
235   CONTINUE
      DO 240 IS=1,NVALP
      WRITE(MP,2010) IS,VLAMB(IS)
240   CALL PRSOL(KDLNC,VCORG,VDIMP,KNEQ,VEC(1,IS))
      GO TO 260
250   CONTINUE
      WRITE(MP,2040)
2040  FORMAT('  ** NSS IS LARGER THAN MASS D.O.F.')
260   RETURN
      END 
